#include <iostream>
using namespace std;

// Base class for a Person (Account Holder)
class Person {
protected:
    int id;
    int age;

public:
    Person(int personId, int personAge) : id(personId), age(personAge) {}

    void showPersonDetails() {
        cout << "Person ID: " << id << "\nAge: " << age << endl;
    }
};

// Base class for a Bank Account
class BankAccount {
protected:
    int accountNumber;
    double balance;

public:
    BankAccount(int accNum, double bal = 0) : accountNumber(accNum), balance(bal) {}

    virtual void checkBalance() {
        cout << "Account Number: " << accountNumber << "\nBalance: $" << balance << endl;
    }

    virtual void deposit(double amount) {
        balance += amount;
        cout << "$" << amount << " deposited. New balance: $" << balance << endl;
    }

    virtual bool withdraw(double amount) {
        if (balance >= amount) {
            balance -= amount;
            cout << "$" << amount << " withdrawn. New balance: $" << balance << endl;
            return true;
        } else {
            cout << "Insufficient funds!" << endl;
            return false;
        }
    }
};

// Derived class for a Savings Account (Single Inheritance)
class SavingsAccount : public BankAccount {
private:
    double interestRate;

public:
    SavingsAccount(int accNum, double bal, double rate) : BankAccount(accNum, bal), interestRate(rate) {}

    void addInterest() {
        balance += (balance * interestRate / 100);
        cout << "Interest added. New balance: $" << balance << endl;
    }

    void checkBalance() override {
        cout << "Savings Account Number: " << accountNumber << "\nBalance: $" << balance << "\nInterest Rate: " << interestRate << "%" << endl;
    }
};

// Base class for Overdraft (used in multiple inheritance)
class Overdraft {
protected:
    double overdraftLimit;

public:
    Overdraft(double limit) : overdraftLimit(limit) {}

    bool checkOverdraft(double amount, double& balance) {
        if (balance + overdraftLimit >= amount) {
            balance -= amount;
            return true;
        } else {
            return false;
        }
    }
};

// Derived class for a Current Account (Multiple Inheritance)
class CurrentAccount : public BankAccount, public Overdraft {
public:
    CurrentAccount(int accNum, double bal, double limit) : BankAccount(accNum, bal), Overdraft(limit) {}

    bool withdraw(double amount) override {
        if (checkOverdraft(amount, balance)) {
            cout << "$" << amount << " withdrawn using overdraft. New balance: $" << balance << endl;
            return true;
        } else {
            cout << "Overdraft limit exceeded!" << endl;
            return false;
        }
    }

    void checkBalance() override {
        cout << "Current Account Number: " << accountNumber << "\nBalance: $" << balance << "\nOverdraft Limit: $" << overdraftLimit << endl;
    }
};

// Derived class for a Premium Account (Hierarchical Inheritance)
class PremiumAccount : public SavingsAccount {
public:
    PremiumAccount(int accNum, double bal, double rate) : SavingsAccount(accNum, bal, rate) {}

    void premiumServices() {
        cout << "Premium services are available for account number: " << accountNumber << endl;
    }
};

// ATM class to handle transactions
class ATM {
public:
    // Modify the performTransaction method in the ATM class
void performTransaction(BankAccount* account) {
    int choice;
    double amount;

    SavingsAccount* savingsAccount = dynamic_cast<SavingsAccount*>(account);

    do {
        cout << "\nATM Menu:\n1. Check Balance\n2. Deposit\n3. Withdraw";
        if (savingsAccount) {
            cout << "\n4. Add Interest"; // Only show this option for SavingsAccount
        }
        cout << "\n5. Exit\nChoose an option: ";
        cin >> choice;

        switch (choice) {
            case 1:
                account->checkBalance();
                break;
            case 2:
                cout << "Enter amount to deposit: ";
                cin >> amount;
                account->deposit(amount);
                break;
            case 3:
                cout << "Enter amount to withdraw: ";
                cin >> amount;
                account->withdraw(amount);
                break;
            case 4:
                if (savingsAccount) {
                    savingsAccount->addInterest();
                } else {
                    cout << "Invalid option!" << endl;
                }
                break;
            case 5:
                cout << "Exiting ATM..." << endl;
                break;
            default:
                cout << "Invalid option!" << endl;
        }
    } while (choice != 5);
}
};

// Main function to run the ATM system
int main() {
    SavingsAccount savings(101, 1000.0, 2.5);
    CurrentAccount current(102, 500.0, 300.0);
    PremiumAccount premium(103, 2000.0, 3.0);

    ATM atm;
    int choice;

    cout << "Welcome to the ATM System\n1. Savings Account\n2. Current Account\n3. Premium Account\nChoose account type: ";
    cin >> choice;

    if (choice == 1) {
        atm.performTransaction(&savings);
    } 
    else if (choice == 2) {
        atm.performTransaction(&current);
    } 
    else if (choice == 3) {
        atm.performTransaction(&premium);
        premium.premiumServices(); 
    } 
    else {
        cout << "Invalid account type!" << endl;
    }

    return 0;
}
